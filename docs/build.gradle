import com.platformlib.plugins.gradle.wrapper.task.DockerTask

plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.platformlib.gradle-wrapper' version '0.2.6'
}

version = project.findProperty('buildVersion') ?: '1.0-SNAPSHOT'
def header = project.findProperty('header') ?: 'Octopus Release Management Gradle Plugin'

// Docker registry URL for pulling container images used in builds
// Example: registry.hub.docker.com or your-company-registry.com
def dockerRegistry = project.findProperty('docker.registry')

// Golang commons dependency coordinates for go-based builds
// Example: com.example.golang.commons:commons:1.0.0:@zip
def golangCommons = project.findProperty('golangCommons')

// Artifactory instance URL for authentication and artifact management
// Example: https://artifactory.your-company.com
def artifactoryUrl = project.findProperty('artifactoryUrl')

// Path to TeamCity's init.gradle script for agent-mode builds
// Example: https://github.com/your-org/your-repo/blob/main/init.gradle
def initGradleLink = project.findProperty('initGradleLink')

repositories {
    jcenter()
}

asciidoctorj {
    attributes 'header': header,
               'version-label': version,
               'docker-registry': dockerRegistry,
               'golang-commons': golangCommons,
               'artifactory-url': artifactoryUrl,
               'init-gradle-link': initGradleLink
}

asciidoctor {
    sources {
        include '**/*.adoc'
    }
}


tasks.register('publishToWiki', DockerTask) {
    doFirst {
        if (initGradleLink == null) {
            throw new IllegalArgumentException("`initGradleLink` property must be defined. Example: -PinitGradleLink=https://github.com/your-org/your-repo/blob/main/init.gradle")
        }
        if (dockerRegistry == null) {
            throw new IllegalArgumentException("`docker.registry` property must be defined. Example: -Pdocker.registry=registry.hub.docker.com")
        }
        if (golangCommons == null) {
            throw new IllegalArgumentException("`golangCommons` property must be defined. Example: -PgolangCommons=com.example.golang.commons:commons:1.0.0:@zip")
        }
        if (artifactoryUrl == null) {
            throw new IllegalArgumentException("`artifactoryUrl` property must be defined. Example: -PartifactoryUrl=https://artifactory.your-company.com")
        }
    }
    image = "${project."docker.registry"}/confluencepublisher/confluence-publisher:0.22.0"
    dockerOptions = ['--network', 'host']
    bindMounts = ["${file('src/docs/asciidoc')}:/var/asciidoc-root-folder"]
    env = ["ROOT_CONFLUENCE_URL"    : project.findProperty("WIKI_URL"),
           "SKIP_SSL_VERIFICATION"  : "true",
           "MAX_REQUESTS_PER_SECOND": "10",
           "USERNAME"               : WIKI_USERNAME,
           "PASSWORD"               : WIKI_PASSWORD,
           "SPACE_KEY"              : "RD",
           "ANCESTOR_ID"            : project.findProperty("RELEASE_MANAGEMENT_GRADLE_PLUGIN_PAGE_ID") ?: "XXXXXXX",
           "PUBLISHING_STRATEGY"    : "REPLACE_ANCESTOR",
           "ORPHAN_REMOVAL_STRATEGY": "KEEP_ORPHANS",
           "NOTIFY_WATCHERS"        : "false",
           "ATTRIBUTES"             : "{\"header\": \"$header\", " +
                                      "\"version-label\": \"$version\", " +
                                      "\"docker-registry\":\"$dockerRegistry\"," +
                                      "\"golang-commons\":\"$golangCommons\"," +
                                      "\"artifactory-url\":\"$artifactoryUrl\"," +
                                      "\"init-gradle-link\":\"$initGradleLink\"}",
           "PUBLISHING_STRATEGY"    : "REPLACE_ANCESTOR",
           "CONVERT_ONLY"           : "false"
    ]
}
