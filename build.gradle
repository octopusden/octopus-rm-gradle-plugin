plugins {
    id 'maven-publish'
    id 'signing'
    id("io.github.gradle-nexus.publish-plugin")
    id 'groovy'
    id 'java-gradle-plugin'
    id 'com.jfrog.artifactory'
}

version = project.findProperty('buildVersion') ?: System.getenv("BUILD_VERSION") ?: '1.0-SNAPSHOT'
group = 'org.octopusden.octopus-release-management'

description "Release management gradle plugin ${version}"

ext {
    m2localPath = project.hasProperty('m2_local') ? new File(m2_local).toURI().toURL().toString().replaceAll(/^file:\//, 'file:///') : null
    escrowBuild = m2localPath != null
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    implementation group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: project['jfrog-artifactory.version']
    implementation group: 'org.octopusden.octopus.infrastructure', name: 'components-registry-service-client', version: '2.0.11'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: project['httpclient.version']
    implementation platform("com.fasterxml.jackson:jackson-bom:${project['jackson.version']}")
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.platformlib.gradle-wrapper', name: 'platformlib-gradle-wrapper-plugin', version: project['com.platformlib.gradle-wrapper.version']
    implementation group: 'org.cyclonedx', name: 'cyclonedx-gradle-plugin', version: project['cyclonedx.version']
}

gradlePlugin {
    plugins {
        ReleaseManagementGradlePlugin {
            id = 'org.octopusden.octopus-release-management'
            displayName = 'org.octopusden.octopus-release-management'
            description = 'Octopus module for release magagement plugin'
            implementationClass = 'org.octopusden.release.management.plugins.gradle.ReleaseManagementGradlePlugin'
        }
        // TODO: It was left for backward compatible. Should be to remove after complete transition to new plugin and adjustmentetion of tests
        if (!project.hasProperty("nexus")) {
            StagingGradlePlugin {
                id = 'gradle-staging-plugin'
                displayName = 'gradle-staging-plugin'
                description = 'Octopus module for release magagement plugin'
                implementationClass = 'org.octopusden.release.management.plugins.gradle.ReleaseManagementGradlePlugin'
            }
        }
    }
}

def resourceDir = "${buildDir}/generated/resources"

sourceSets {
  main {
    java { srcDirs = [] }    // no source dirs for the java compiler
    groovy { srcDirs = ["src/main/groovy", "src/main/java"] }  // compile   everything in src/ with groovy
    resources {
        srcDirs += [resourceDir]
    }
  }
}

java {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}
//
//Publishing section
//

apply plugin: 'maven-publish'

task exportDependenciesToTeamcity

artifactory {

    def baseUrl = System.getenv('ARTIFACTORY_URL') ?: project.properties.get('artifactoryUrl')
    if (baseUrl != null) {
        contextUrl = "${baseUrl}/artifactory" as String
    }

    publish {
        repository {
            repoKey = 'rnd-maven-dev-local'
            username = System.getenv('ARTIFACTORY_DEPLOYER_USERNAME') ?: project.findProperty('NEXUS_USER')
            password = System.getenv('ARTIFACTORY_DEPLOYER_PASSWORD') ?: project.findProperty('NEXUS_PASSWORD')
            maven = true
        }
        defaults {
            publications('ALL_PUBLICATIONS')
            publishArtifacts = true
            publishPom = true
            publishBuildInfo = true
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(System.getenv("MAVEN_USERNAME"))
            password.set(System.getenv("MAVEN_PASSWORD"))
        }
    }
    transitionCheckOptions {
        maxRetries.set(60)
        delayBetween.set(Duration.ofSeconds(30))
    }
}

publishing {
    publications {
        // TODO: It was left for backward compatibility. Should be removed after complete transition to a new plugin and fixing tests
        if (!project.hasProperty("nexus")) {
            mavenJava(MavenPublication) {
                groupId 'org.octopusden.octopus-gradle-plugin'
                artifactId 'gradle-staging-plugin'
                from components.java
            }
        }
        withType(MavenPublication) {
            pom {
                name = project.name
                description = "Octopus module for release management"
                url = "https://github.com/octopusden/octopus-rm-gradle-plugin.git"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    url = "https://github.com/octopusden/octopus-rm-gradle-plugin.git"
                    connection = "scm:git://github.com/octopusden/octopus-rm-gradle-plugin.git"
                }
                developers {
                    developer {
                        id = "octopus"
                        name = "octopus"
                    }
                }
            }
        }
    }
}

if (project.hasProperty("nexus") && !project.version.toString().toUpperCase().endsWith("SNAPSHOT")) {
    signing {
        sign publishing.publications
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(
                signingKey,
                signingPassword
        )
    }
}

//END Publishing section

if (!escrowBuild) {
    project.tasks.findByPath("publish")?.dependsOn(":artifactoryPublish")
}

task openStagingRepository
task closeStagingRepository
